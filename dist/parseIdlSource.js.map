{"version":3,"sources":["src/parseIdlSource.js"],"names":[],"mappings":";;;;;;;;;;;;qBAUS,cAAc;;kBARR,IAAI;;;;8BACC,kBAAkB;;;;AAOtC,SAAS,cAAc,CAAC,SAAiB,EAAiB;AACtD,WAAO,gBAAG,UAAU,CAAC,MAAM,CAAC,UAAA,QAAQ,EAAI;AACpC,YAAI;AACA,oBAAQ,CAAC,MAAM,CAAC,4BAAQ,KAAK,CAAC,SAAS,EAAE;AACrC,mCAAmB,EAAE,IAAI;AACzB,0BAAU,EAAE,IAAI;AAChB,4BAAY,EAAE,IAAI,EACrB,CAAC,CAAC,CAAC;SACP,CAAC,OAAO,CAAC,EAAE;AACR,oBAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACvB;AACD,gBAAQ,CAAC,WAAW,EAAE,CAAC;KAC1B,CAAC,CAAC;CACN","file":"src/parseIdlSource.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\nimport WebIDL2 from '@motiz88/webidl2';\r\n\r\nexport\r\ndefault\r\n\r\nfunction parseIdlSource(idlSource: string): Rx.Observable {\r\n    return Rx.Observable.create(observer => {\r\n        try {\r\n            observer.onNext(WebIDL2.parse(idlSource, {\r\n                allowNestedTypedefs: true,\r\n                allowClass: true,\r\n                allowExtends: true,\r\n            }));\r\n        } catch (e) {\r\n            observer.onError(e);\r\n        }\r\n        observer.onCompleted();\r\n    });\r\n}"]}