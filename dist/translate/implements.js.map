{"version":3,"sources":["src/translate/implements.js"],"names":[],"mappings":";;;;;;;;;;;;qBAgBS,mBAAmB;;sBAdT,QAAQ;;;;kBACZ,IAAI;;;;wBACW,YAAY;;;;oBAChB,QAAQ;;;;2BACV,gBAAgB;;;;+BAG1B,oBAAoB;;;;AADlC,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAQ/B,SAAS,mBAAmB,CAAC,IAAiB,EAAiB;AAC3D,6BAAO,IAAI,CAAC,IAAI,KAAK,YAAY,qCACI,IAAI,CAAC,IAAI,CAAG,CAAC;;AAElD,WAAO,8BAAY,2BAAkB,IAAI,CAAC,EAAE,OAAO,CAAC,6BAAE,aAAa,CAAC,CAAC,CAChE,MAAM,CACN,OAAO,CAAC,6BAAE,YAAY,CAAC,EACpB,uBAAc,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,cAAc,CAAC,EAAE,uBAAc,IAAI,cAAW,CAAC,EACnF,OAAO,CAAC,6BAAE,WAAW,CAAC,CACzB,CAAC;CACT","file":"src/translate/implements.js","sourcesContent":["/* @flow */\r\n\r\nimport assert from 'assert';\r\nimport Rx from 'rx';\r\nimport translateExtAttrs from './extAttrs';\r\nimport translateType from './type';\r\nimport concatIfAny from '../concatIfAny';\r\n\r\nvar literal = Rx.Observable.of;\r\nimport t from '../FormattingToken';\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateImplements(node: IdlConstant): Rx.Observable {\r\n    assert(node.type === 'implements',\r\n        `Expected IdlImplements, found ${node.type}`);\r\n\r\n    return concatIfAny(translateExtAttrs(node), literal(t.newlineIndent))\r\n        .concat(\r\n        \tliteral(t.enterComment),\r\n            translateType(node.target), literal(' implements '), translateType(node.implements),\r\n            literal(t.exitComment)\r\n        );\r\n}"]}