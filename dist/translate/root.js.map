{"version":3,"sources":["src/translate/root.js"],"names":[],"mappings":";;;;;;;;;;;;;qBAsBS,aAAa;;sBAnBH,QAAQ;;;;yBACI,aAAa;;;;8BACjB,kBAAkB;;;;iCACN,qBAAqB;;;;yBAC7B,aAAa;;;;oBAClB,QAAQ;;;;uBACL,WAAW;;;;wBACV,YAAY;;;;0BACV,cAAc;;;;gCACR,oBAAoB;;;;;;;;AAU1D,SAAS,aAAa,CAAC,IAAuB,EAAiB;AAC3D,6BAAO,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,oBAAoB,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,IAAI,IAAI,CAAC,IAAI,KAAK,YAAY,IAAI,IAAI,CAAC,IAAI,KAAK,YAAY,IACpO,IAAI,CAAC,IAAI,KAAK,mBAAmB,yCACF,IAAI,CAAC,IAAI,CAAG,CAAC;AACtD,YAAQ,IAAI,CAAC,IAAI;AACb,aAAK,WAAW;AACZ,mBAAO,4BAAoB,IAAI,CAAgB,CAAC;AAAA,AACpD,aAAK,oBAAoB;AACrB,mBAAO,oCAA4B,IAAI,CAAwB,CAAC;AAAA,AACpE,aAAK,WAAW;AACZ,mBAAO,4BAAoB,IAAI,CAAwB,CAAC;AAAA,AAC5D,aAAK,MAAM;AACP,mBAAO,uBAAe,IAAI,CAAW,CAAC;AAAA,AAC1C,aAAK,SAAS;AACV,mBAAO,0BAAkB,IAAI,CAAc,CAAC;AAAA,AAChD,aAAK,UAAU;AACX,mBAAO,2BAAmB,IAAI,CAAe,CAAC;AAAA,AAClD,aAAK,YAAY;AACb,mBAAO,6BAAqB,IAAI,CAAiB,CAAC;AAAA,AACtD,aAAK,YAAY;AACb,mBAAO,iCAAqB,IAAI,CAAiB,CAAC;AAAA,AACtD,aAAK,mBAAmB;;AAEpB,mBAAO,mCAA0B,IAAI,CAAC,CAAC;AAAA,AAC3C;AACI,mBAAO,iCAAe,IAAI,CAAC,CAAC;AAAA,KACnC;;CAEJ","file":"src/translate/root.js","sourcesContent":["/* @flow */\r\n\r\n// import Rx from 'rx';\r\nimport assert from 'assert';\r\nimport translateInterface from './interface';\r\nimport notImplemented from './notImplemented';\r\nimport translateCallbackInterface from './callbackInterface';\r\nimport translateException from './exception';\r\nimport translateEnum from './enum';\r\nimport translateTypedef from './typedef';\r\nimport translateCallback from './callback';\r\nimport translateDictionary from './dictionary';\r\nimport translateNamedConstructor from './namedConstructor';\r\n\r\n// `implements` declarations are removed by preprocessAst, so just stub it out here\r\nimport translateImplements from './notImplemented';\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateRoot(node: IdlRootDefinition): Rx.Observable {\r\n    assert(node.type === 'interface' || node.type === 'callback interface' || node.type === 'exception' || node.type === 'enum' || node.type === 'typedef' || node.type === 'callback' || node.type === 'dictionary' || node.type === 'implements'\r\n           || node.type === 'named constructor',\r\n        `Expected IdlRootDefinition, found ${node.type}`);\r\n    switch (node.type) {\r\n        case 'interface':\r\n            return translateInterface((node: IdlInterface));\r\n        case 'callback interface':\r\n            return translateCallbackInterface((node: IdlCallbackInterface));\r\n        case 'exception':\r\n            return translateException((node: IdlCallbackInterface));\r\n        case 'enum':\r\n            return translateEnum((node: IdlEnum));\r\n        case 'typedef':\r\n            return translateTypedef((node: IdlTypedef));\r\n        case 'callback':\r\n            return translateCallback((node: IdlCallback));\r\n        case 'dictionary':\r\n            return translateDictionary((node: IdlDictionary));\r\n        case 'implements':\r\n            return translateImplements((node: IdlImplements));\r\n        case 'named constructor':\r\n            // These are inserted by preprocessAst, NOT by webidl2.js\r\n            return translateNamedConstructor(node);\r\n        default:\r\n            return notImplemented(node);\r\n    }\r\n    // IdlInterface | IdlCallbackInterface | IdlException | IdlEnum | IdlTypedef | IdlCallback | IdlDictionary | IdlImplements;\r\n}"]}