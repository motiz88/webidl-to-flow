{"version":3,"sources":["src/translate/callback.js"],"names":[],"mappings":";;;;;;;;;;;;qBAgBS,iBAAiB;;sBAdP,QAAQ;;;;6BACD,mBAAmB;;;;kBAC9B,IAAI;;;;wBACW,YAAY;;;;2BAClB,gBAAgB;;;;+BAG1B,oBAAoB;;;;AADlC,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAQ/B,SAAS,iBAAiB,CAAC,IAAiB,EAAiB;AACzD,6BAAO,IAAI,CAAC,IAAI,KAAK,UAAU,mCACI,IAAI,CAAC,IAAI,CAAG,CAAC;;AAEhD,WAAO,8BAAY,2BAAkB,IAAI,CAAC,EAAE,OAAO,CAAC,6BAAE,aAAa,CAAC,CAAC,CAChE,MAAM,CAAC,gCAAc,IAAI,CAAC,CAAC,CAAC;CACpC","file":"src/translate/callback.js","sourcesContent":["/* @flow */\r\n\r\nimport assert from 'assert';\r\nimport emitTypeAlias from '../emit/typeAlias';\r\nimport Rx from 'rx';\r\nimport translateExtAttrs from './extAttrs';\r\nimport concatIfAny from '../concatIfAny';\r\n\r\nvar literal = Rx.Observable.of;\r\nimport t from '../FormattingToken';\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateCallback(node: IdlCallback): Rx.Observable {\r\n    assert(node.type === 'callback',\r\n        `Expected IdlCallback, found ${node.type}`);\r\n    \r\n    return concatIfAny(translateExtAttrs(node), literal(t.newlineIndent))\r\n        .concat(emitTypeAlias(node));\r\n}"]}