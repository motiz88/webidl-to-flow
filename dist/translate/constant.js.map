{"version":3,"sources":["src/translate/constant.js"],"names":[],"mappings":";;;;;;;;;;;;qBAgBS,iBAAiB;;sBAdP,QAAQ;;;;yBACL,eAAe;;;;kBACtB,IAAI;;;;wBACW,YAAY;;;;2BAClB,gBAAgB;;;;+BAG1B,oBAAoB;;;;AADlC,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAQ/B,SAAS,iBAAiB,CAAC,IAAiB,EAAiB;AACzD,6BAAO,IAAI,CAAC,IAAI,KAAK,OAAO,mCACO,IAAI,CAAC,IAAI,CAAG,CAAC;AAChD,QAAI,IAAI,CAAC,QAAQ,IAAI,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,EACrD;AACC,YAAI,CAAC,OAAO,GAAG,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC;KACvD;AACD,wBAAO,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,KAAK,EAAE,yCAAyC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;;AAEvI,WAAO,8BAAY,2BAAkB,IAAI,CAAC,EAAE,OAAO,CAAC,6BAAE,aAAa,CAAC,CAAC,CAChE,MAAM,CAAC,4BAAU,IAAI,CAAC,CAAC,CAAC;CAChC","file":"src/translate/constant.js","sourcesContent":["/* @flow */\r\n\r\nimport assert from 'assert';\r\nimport emitField from '../emit/field';\r\nimport Rx from 'rx';\r\nimport translateExtAttrs from './extAttrs';\r\nimport concatIfAny from '../concatIfAny';\r\n\r\nvar literal = Rx.Observable.of;\r\nimport t from '../FormattingToken';\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateConstant(node: IdlConstant): Rx.Observable {\r\n    assert(node.type === 'const',\r\n        `Expected IdlConstant, found ${node.type}`);\r\n    if (node.nullable && typeof node.idlType === 'string')\r\n    {\r\n    \tnode.idlType = {idlType: node.idlType, nullable: true};\r\n    }\r\n    assert.equal(node.nullable, node.idlType.nullable || false, \"node.nullable != node.idlType.nullable \" + require('util').inspect(node));\r\n\r\n    return concatIfAny(translateExtAttrs(node), literal(t.newlineIndent))\r\n        .concat(emitField(node));\r\n}"]}