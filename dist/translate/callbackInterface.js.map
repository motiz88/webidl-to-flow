{"version":3,"sources":["src/translate/callbackInterface.js"],"names":[],"mappings":";;;;;;;;;;;;qBAiBS,0BAA0B;;sBAfhB,QAAQ;;;;+BACU,mBAAmB;;;;kBACzC,IAAI;;;;2BACK,iBAAiB;;;;2BACtB,cAAc;;;;4BACC,gBAAgB;;;;+BAGpC,oBAAoB;;;;AADlC,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAQ/B,SAAS,0BAA0B,CAAC,IAA0B,EAAiB;AAC3E,6BAAO,IAAI,CAAC,IAAI,KAAK,oBAAoB,4CACG,IAAI,CAAC,IAAI,CAAG,CAAC;AACzD,6BAAO,CAAC,IAAI,CAAC,WAAW,EAAE,wHAAwH,CAAC,CAAC;AACpJ,QAAI,IAAI,GAAG,OAAO,kBAAe,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,EAAE,CAAA,QAAG,IAAI,CAAC,IAAI,SAAI,IAAI,CAAC,IAAI,UAChF,6BAAE,aAAa,YACP,IAAI,CAAC,IAAI,UACjB,6BAAE,SAAS,CACd,CACA,MAAM,CAAC,8BACJ,gBAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,+BAEnC,CAAC,CACD,MAAM,CAAC,OAAO,CAAC,6BAAE,UAAU,CAAC,CAAC,CAAC;;;AAGnC,QAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,OAAO;eAAI,OAAO,CAAC,IAAI,KAAK,WAAW;KAAA,CAAC,EAAE;AAC7D,YAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,OAAO;mBAAI,OAAO,CAAC,IAAI,KAAK,WAAW,IAAI,CAAC,OAAO,UAAO,IAAI,OAAO,CAAC,IAAI;SAAA,CAAC,CAAC;AAC7G,YAAI,MAAM,GAAG,8BAAO,MAAM,CAAC,GAAG,CAAC,UAAA,EAAE;mBAAI,EAAE,CAAC,IAAI;SAAA,CAAC,CAAC,CAAC;AAC/C,YAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,gBAAI,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CACxC,SAAS,CAAC,UAAA,EAAE;uBAAI,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,+BAAsB,EAAE,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;aAAA,CAAC,CACpF,CAAC;SACL;KACJ;AACD,WAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;CACpC","file":"src/translate/callbackInterface.js","sourcesContent":["/* @flow */\r\n\r\nimport assert from 'assert';\r\nimport translateInterfaceMember from './interfaceMember';\r\nimport Rx from 'rx';\r\nimport emitMembers from '../emit/members';\r\nimport unique from 'array-unique';\r\nimport translateFunctionType from './functionType';\r\n\r\nvar literal = Rx.Observable.of;\r\nimport t from '../FormattingToken';\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateCallbackInterface(node: IdlCallbackInterface): Rx.Observable {\r\n    assert(node.type === 'callback interface',\r\n        `Expected IdlCallbackInterface, found ${node.type}`);\r\n    assert(!node.inheritance, \"IdlCallbackInterface should not have inheritance info here (AST should be preprocessed with flattenCallbackInterfaces)\");\r\n    var decl = literal(`/* WebIDL: ${node.partial ? 'partial ' : ''}${node.type} ${node.name} */`,\r\n            t.newlineIndent,\r\n            `type ${node.name} = `,\r\n            t.openBrace\r\n        )\r\n        .concat(emitMembers(\r\n            Rx.Observable.from(node.members),\r\n            translateInterfaceMember\r\n        ))\r\n        .concat(literal(t.closeBrace));\r\n\r\n    // Is this a single operation callback interface?\r\n    if (!node.members.some(subnode => subnode.type === 'attribute')) {\r\n        var regops = node.members.filter(subnode => subnode.type === 'operation' && !subnode.static && subnode.name);\r\n        var opname = unique(regops.map(op => op.name));\r\n        if (opname.length === 1) {\r\n            decl = decl.concat(Rx.Observable.from(regops)\r\n                .concatMap(op => literal(' | (').concat(translateFunctionType(op), literal(')')))\r\n            );\r\n        }\r\n    }\r\n    return decl.concat(literal(';'));\r\n}"]}