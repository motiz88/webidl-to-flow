{"version":3,"sources":["src/translate/unionType.js"],"names":[],"mappings":";;;;;;;;;;;;qBAaS,kBAAkB;;kBAXZ,IAAI;;;;sBACA,QAAQ;;;;oBACD,QAAQ;;;;AAElC,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAO/B,SAAS,kBAAkB,CAAC,IAAa,EAAE,QAAiB,EAAiB;AACzE,6BAAO,IAAI,CAAC,KAAK,EAAE,uBAAuB,CAAC,CAAC;AAC5C,6BAAO,CAAC,IAAI,CAAC,KAAK,EAAE,sCAAsC,CAAC,CAAC;AAC5D,6BAAO,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE,sCAAsC,CAAC,CAAC;AACjF,QAAI,SAAS,GAAG,gBAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAC3C,SAAS,CAAC,UAAA,OAAO;eAAI,uBAAc,OAAO,CAAC,CACvC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;KAAA,CAAC,CAC3B,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAEjB,QAAI,QAAQ,EACR,OAAO,gBAAG,UAAU,CAAC,MAAM,CACvB,OAAO,CAAC,GAAG,CAAC,EACZ,SAAS,EACT,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAElB,OAAO,SAAS,CAAC;CACxB","file":"src/translate/unionType.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\nimport assert from 'assert';\r\nimport translateType from './type';\r\n\r\nvar literal = Rx.Observable.of;\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateUnionType(node: IdlType, enclosed: boolean): Rx.Observable {\r\n    assert(node.union, \"Expected a union type\");\r\n    assert(!node.array, \"A union type cannot also be an array\");\r\n    assert(typeof node.idlType !== 'string', 'Expected a type list in node.idlType');\r\n    var coreUnion = Rx.Observable.from(node.idlType)\r\n        .concatMap(subnode => translateType(subnode)\r\n            .concat(literal(' | ')))\r\n        .skipLast(1);\r\n\r\n    if (enclosed)\r\n        return Rx.Observable.concat(\r\n            literal('('),\r\n            coreUnion,\r\n            literal(')'));\r\n    else\r\n        return coreUnion;\r\n}"]}