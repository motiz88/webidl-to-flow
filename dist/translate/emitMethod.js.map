{"version":3,"sources":["src/translate/emitMethod.js"],"names":[],"mappings":";;;;;;;;;;;;qBAgBS,UAAU;;kBAdJ,IAAI;;;;oBAKO,QAAQ;;;;yBACH,aAAa;;;;;;AAH5C,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAW/B,SAAS,UAAU,CAAC,IAGnB,EAAiB;AACd,WAAO,gBAAG,UAAU,CAAC,MAAM,CACvB,OAAO,CAAC,IAAI,UAAO,GAAG,SAAS,GAAG,EAAE,CAAC,EACrC,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC,EACnC,OAAO,KAAK,EACZ,4BAAmB,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC,EACxC,OAAO,KAAK,EACZ,OAAO,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC,EACjC,IAAI,CAAC,OAAO,GAAG,uBAAc,IAAI,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,EACxD,OAAO,CAAC,GAAG,CAAC,CACf,CAAC;CACL","file":"src/translate/emitMethod.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\n// import assert from 'assert';\r\n\r\nvar literal = Rx.Observable.of;\r\n\r\nimport translateType from './type';\r\nimport translateArguments from './arguments';\r\n\r\n\r\nexport\r\ndefault\r\n\r\nfunction emitMethod(node: {\r\n    name ? : string, static ? : boolean, arguments: ? array < IdlArgument >,\r\n    idlType ? : IdlType\r\n}): Rx.Observable {\r\n    return Rx.Observable.concat(\r\n        literal(node.static ? 'static ' : ''),\r\n        literal(node.name ? node.name : ''),\r\n        literal(`(`),\r\n        translateArguments(node.arguments || []),\r\n        literal(`)`),\r\n        literal(node.idlType ? ': ' : ''),\r\n        node.idlType ? translateType(node.idlType) : literal(''),\r\n        literal(';')\r\n    );\r\n}"]}