{"version":3,"sources":["src/translate/arguments.js"],"names":[],"mappings":";;;;;;;;;;;;qBAYS,kBAAkB;;kBAVZ,IAAI;;;;wBACW,YAAY;;;;AAE1C,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAO/B,SAAS,kBAAkB,CAAC,IAAwB,EAAE,QAA0B,EAAiB;AAC7F,QAAI,aAAa,GAAG,gBAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CACvC,SAAS,CAAC,UAAA,OAAO;eAAI,2BAAkB,OAAO,CAAC,CAC3C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KAAA,CAAC,CAC1B,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAEjB,QAAI,QAAQ,IAAI,OAAO,QAAQ,KAAK,SAAS,EACzC,QAAQ,GAAG,IAAI,CAAC;;AAGpB,QAAI,QAAQ,EACR,OAAO,gBAAG,UAAU,CAAC,MAAM,CACvB,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EACpB,aAAa,EACb,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAE1B,OAAO,aAAa,CAAC;CAC5B","file":"src/translate/arguments.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\nimport translateArgument from './argument';\r\n\r\nvar literal = Rx.Observable.of;\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateArguments(node: Array<IdlArgument>, enclosed: boolean | string): Rx.Observable {\r\n    var coreArguments = Rx.Observable.from(node)\r\n        .concatMap(subnode => translateArgument(subnode)\r\n            .concat(literal(', ')))\r\n        .skipLast(1);\r\n\r\n    if (enclosed && typeof enclosed === 'boolean')\r\n        enclosed = '()';\r\n\r\n\r\n    if (enclosed)\r\n        return Rx.Observable.concat(\r\n            literal(enclosed[0]),\r\n            coreArguments,\r\n            literal(enclosed[1]));\r\n    else\r\n        return coreArguments;\r\n}"]}