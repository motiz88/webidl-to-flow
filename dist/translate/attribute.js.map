{"version":3,"sources":["src/translate/attribute.js"],"names":[],"mappings":";;;;;;;;;;;;qBAgBS,kBAAkB;;sBAdR,QAAQ;;;;yBACL,eAAe;;;;kBACtB,IAAI;;;;wBACW,YAAY;;;;2BAClB,gBAAgB;;;;+BAG1B,oBAAoB;;;;AADlC,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAQ/B,SAAS,kBAAkB,CAAC,IAAkB,EAAiB;AAC3D,6BAAO,IAAI,CAAC,IAAI,KAAK,WAAW,oCACI,IAAI,CAAC,IAAI,CAAG,CAAC;AACjD,WAAO,8BAAY,2BAAkB,IAAI,CAAC,EAAE,OAAO,CAAC,6BAAE,aAAa,CAAC,CAAC,CAChE,MAAM,CAAC,4BAAU,IAAI,CAAC,CAAC,CAAC;CAChC","file":"src/translate/attribute.js","sourcesContent":["/* @flow */\r\n\r\nimport assert from 'assert';\r\nimport emitField from '../emit/field';\r\nimport Rx from 'rx';\r\nimport translateExtAttrs from './extAttrs';\r\nimport concatIfAny from '../concatIfAny';\r\n\r\nvar literal = Rx.Observable.of;\r\nimport t from '../FormattingToken';\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateAttribute(node: IdlAttribute): Rx.Observable {\r\n    assert(node.type === 'attribute',\r\n        `Expected IdlAttribute, found ${node.type}`);\r\n    return concatIfAny(translateExtAttrs(node), literal(t.newlineIndent))\r\n        .concat(emitField(node));\r\n}"]}