{"version":3,"sources":["src/translate/exceptionMember.js"],"names":[],"mappings":";;;;;;;;;;;;qBAaS,wBAAwB;;sBAXd,QAAQ;;;;8BACS,kBAAkB;;;;yBACvB,aAAa;;;;wBACd,YAAY;;;;8BACf,kBAAkB;;;;AAO7C,SAAS,wBAAwB,CAAC,IAAwB,EAAiB;AACvE,6BAAO,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,0CACxC,IAAI,CAAC,IAAI,CAAG,CAAC;AACvD,YAAQ,IAAI,CAAC,IAAI;AACb,aAAK,OAAO;AACR,mBAAO,iCAAyB,IAAI,CAAqB,CAAC;AAAA,AAC9D,aAAK,WAAW;AACZ,mBAAO,4BAAoB,IAAI,CAAgB,CAAC;AAAA,AACpD,aAAK,OAAO;AACR,mBAAO,2BAAmB,IAAI,CAAe,CAAC;AAAA,AAClD;AACI,mBAAO,iCAAe,IAAI,CAAC,CAAC;AAAA,KACnC;;CAEJ","file":"src/translate/exceptionMember.js","sourcesContent":["/* @flow */\r\n\r\nimport assert from 'assert';\r\nimport translateExceptionField from './exceptionField';\r\nimport translateOperation from './operation';\r\nimport translateConstant from './constant';\r\nimport notImplemented from './notImplemented';\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateExceptionMember(node: IdlExceptionMember): Rx.Observable {\r\n    assert(node.type === 'field' || node.type === 'operation' || node.type === 'const',\r\n        `Expected IdlExceptionMember, found ${node.type}`);\r\n    switch (node.type) {\r\n        case 'field':\r\n            return translateExceptionField((node: IdlExceptionField));\r\n        case 'operation':\r\n            return translateOperation((node: IdlOperation));\r\n        case 'const':\r\n            return translateConstant((node: IdlConstant));\r\n        default:\r\n            return notImplemented(node);\r\n    }\r\n    //IdlIterator | IdlOperation | IdlSerializer | IdlConstant;\r\n}"]}