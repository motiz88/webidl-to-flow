{"version":3,"sources":["src/translate/emitClass.js"],"names":[],"mappings":";;;;;;;;;;;;qBAaS,SAAS;;kBAXH,IAAI;;;;2BACK,eAAe;;;;+BACX,mBAAmB;;;;AAE/C,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAO/B,SAAS,SAAS,CAAC,IAMd,EACD,UAAwC,EAAiB;AACzD,eAAO,OAAO,oBACL,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,EAAE,CAAA,QAAG,IAAI,CAAC,IAAI,SAAI,IAAI,CAAC,IAAI,2BACpD,IAAI,CAAC,IAAI,CAAG,CACnB,MAAM,CAAC,kCAAgB,IAAI,CAAC,CAAC,CAC7B,MAAM,CAAC,OAAO,QACrB,CAAC,CACM,MAAM,CAAC,8BACJ,gBAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAChC,UAAU,CACb,CAAC,CACD,MAAM,CAAC,OAAO,OAAO,CAAC,CAAC;CAE/B","file":"src/translate/emitClass.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\nimport emitMembers from './emitMembers';\r\nimport emitInheritance from './emitInheritance';\r\n\r\nvar literal = Rx.Observable.of;\r\n\r\nexport\r\ndefault\r\n\r\nfunction emitClass(node: {\r\n        type: string,\r\n        name: string,\r\n        inheritance: ? (string | IdlType),\r\n        members : Array < any >,\r\n        partial ? : boolean\r\n    },\r\n    nodeMapper: (node: any) => Rx.Observable): Rx.Observable {\r\n    return literal(`\r\n/* WebIDL: ${node.partial ? 'partial ' : ''}${node.type} ${node.name} */\r\ndeclare class ${node.name}`)\r\n        .concat(emitInheritance(node))\r\n        .concat(literal(` {\r\n`))\r\n        .concat(emitMembers(\r\n            Rx.Observable.from(node.members),\r\n            nodeMapper\r\n        ))\r\n        .concat(literal(`}\\n`));\r\n\r\n}"]}