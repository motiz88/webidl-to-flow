{"version":3,"sources":["src/translate/enum.js"],"names":[],"mappings":";;;;;;;;;;;;;;qBAgBS,aAAa;;sBAdH,QAAQ;;;;6BACD,mBAAmB;;;;kBAC9B,IAAI;;;;wBACW,YAAY;;;;2BAClB,gBAAgB;;;;+BAG1B,oBAAoB;;;;AADlC,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAQ/B,SAAS,aAAa,CAAC,IAAa,EAAiB;AACjD,6BAAO,IAAI,CAAC,IAAI,KAAK,MAAM,+BACI,IAAI,CAAC,IAAI,CAAG,CAAC;;AAE5C,WAAO,8BAAY,2BAAkB,IAAI,CAAC,EAAE,OAAO,CAAC,6BAAE,aAAa,CAAC,CAAC,CAChE,MAAM,CAAC,gCAAc,eAAc;AAChC,eAAO,EAAE,QAAQ;KACpB,EAAE,IAAI,EAAE;AACL,cAAM,EAAE,IAAI;KACf,CAAC,CAAC,CAAC,CAAC;CACZ","file":"src/translate/enum.js","sourcesContent":["/* @flow */\r\n\r\nimport assert from 'assert';\r\nimport emitTypeAlias from '../emit/typeAlias';\r\nimport Rx from 'rx';\r\nimport translateExtAttrs from './extAttrs';\r\nimport concatIfAny from '../concatIfAny';\r\n\r\nvar literal = Rx.Observable.of;\r\nimport t from '../FormattingToken';\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateEnum(node: IdlEnum): Rx.Observable {\r\n    assert(node.type === 'enum',\r\n        `Expected IdlEnum, found ${node.type}`);\r\n\r\n    return concatIfAny(translateExtAttrs(node), literal(t.newlineIndent))\r\n        .concat(emitTypeAlias(Object.assign({\r\n            idlType: 'string'\r\n        }, node, {\r\n            values: null\r\n        })));\r\n}"]}