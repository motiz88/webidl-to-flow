{"version":3,"sources":["src/translate/type.js"],"names":[],"mappings":";;;;;;;;;;;;qBAiBS,aAAa;;kBAfP,IAAI;;;;sBACA,QAAQ;;;;yBAKI,aAAa;;;;yBACb,aAAa;;;;kCACjB,wBAAwB;;;;;;AAJnD,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAW/B,SAAS,aAAa;;;8BAEJ;YAFK,IAEtB;AASO,oBAAY,GAEZ,IAAI;;;AAVR,iCAAO,IAAI,CAAC,CAAC;AACb,YAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;AAC1B,gBAAI,IAAI,mCAAkB,EACtB,OAAO,OAAO,CAAC,gCAAe,IAAI,CAAC,CAAC,CAAC,KAErC,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;SAC5B;;AAED,YAAI,YAAY,GAAG,KAAK,CAAC;;AAEzB,YAAI,IAAI,GAAG,gBAAG,UAAU,CAAC,KAAK,EAAE,CAAC;;AAEjC,YAAI,IAAI,CAAC,QAAQ,EAAE;AACf,wBAAY,GAAG,IAAI,CAAC;AACpB,gBAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;SACpC;;AAED,YAAI,IAAI,CAAC,KAAK,EACV,OAAO,IAAI,CAAC,MAAM,CAAC,4BAAmB,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;;AAE/D,YAAI,IAAI,CAAC,KAAK,EACV,OAAO,IAAI,CAAC,MAAM,CAAC,4BAAmB,IAAI,CAAC,CAAC,CAAC;;AAEjD,YAAI,IAAI,CAAC,OAAO,EACZ,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,EAAE,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;;AAE7G,YAAI,OAAO,IAAI,CAAC,OAAO,KAAK,QAAQ;iBACX,IAAI,CAAC,OAAO;;;eAEjC,OAAO,OAAO,SAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAK,CAAC;KACtD;CAAA","file":"src/translate/type.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\nimport assert from 'assert';\r\n// import notImplemented from './notImplemented';\r\n\r\nvar literal = Rx.Observable.of;\r\n\r\nimport translateUnionType from './unionType';\r\nimport translateArrayType from './arrayType';\r\nimport primitiveTypes from '../data/primitiveTypes';\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateType(node: IdlType | string | {\r\n    arguments: Array < IdlArgument >\r\n}): Rx.Observable {\r\n    assert(node);\r\n    if (typeof node === 'string') {\r\n        if (node in primitiveTypes)\r\n            return literal(primitiveTypes[node]);\r\n        else\r\n            return literal(node);\r\n    }\r\n\r\n    var encloseUnion = false;\r\n\r\n    var decl = Rx.Observable.empty();\r\n\r\n    if (node.nullable) {\r\n        encloseUnion = true;\r\n        decl = decl.concat(literal('?'));\r\n    }\r\n\r\n    if (node.union)\r\n        return decl.concat(translateUnionType(node, encloseUnion));\r\n\r\n    if (node.array)\r\n        return decl.concat(translateArrayType(node));\r\n\r\n    if (node.generic)\r\n        return decl.concat(translateType(node.generic), literal('<'), translateType(node.idlType), literal('>'));\r\n\r\n    if (typeof node.idlType === 'string')\r\n        return translateType(node.idlType);\r\n    else\r\n        return literal(`/* ${JSON.stringify(node)}*/`);\r\n}"]}