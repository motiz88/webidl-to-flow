{"version":3,"sources":["src/translate/functionType.js"],"names":[],"mappings":";;;;;;;;;;;;qBAeS,qBAAqB;;kBAbf,IAAI;;;;oBAKO,QAAQ;;;;yBACH,aAAa;;;;;;AAH5C,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAU/B,SAAS,qBAAqB,CAAC,IAA8E,EAAiB;AAC1H,WAAO,gBAAG,UAAU,CAAC,MAAM,CAC1B,4BAAmB,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EACxC,OAAO,CAAC,MAAM,CAAC,EACZ,uBAAc,IAAI,CAAC,OAAO,CAAC,CAC9B,CAAC;CACL","file":"src/translate/functionType.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\n// import notImplemented from './notImplemented';\r\n\r\nvar literal = Rx.Observable.of;\r\n\r\nimport translateType from './type';\r\nimport translateArguments from './arguments';\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateFunctionType(node: {name: string, idlType: IdlType | string, arguments: Array<IdlArgument>}): Rx.Observable {\r\n    return Rx.Observable.concat(\r\n    \ttranslateArguments(node.arguments, '()'),\r\n    \tliteral(' => '),\r\n        translateType(node.idlType)\r\n    );\r\n}"]}