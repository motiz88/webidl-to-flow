{"version":3,"sources":["src/translate/argument.js"],"names":[],"mappings":";;;;;;;;;;;;qBAcS,iBAAiB;;kBAZX,IAAI;;;;;;oBAEO,QAAQ;;;;wBACJ,YAAY;;;;2BAClB,gBAAgB;;;;AACxC,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAO/B,SAAS,iBAAiB,CAAC,IAAiB,EAAiB;AACzD,WAAO,gBAAG,UAAU,CAAC,MAAM,CAC1B,8BAAY,2BAAkB,IAAI,EAAE,GAAG,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,EACpD,OAAO,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,GAAG,EAAE,CAAC,EACnC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAClB,OAAO,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC,EAClC,OAAO,CAAC,IAAI,CAAC,EACb,uBAAc,IAAI,CAAC,OAAO,CAAC,CAC9B,CAAC;CACL","file":"src/translate/argument.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\n// import assert from 'assert';\r\nimport translateType from './type';\r\nimport translateExtAttrs from './extAttrs';\r\nimport concatIfAny from '../concatIfAny';\r\nvar literal = Rx.Observable.of;\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateArgument(node: IdlArgument): Rx.Observable {\r\n    return Rx.Observable.concat(\r\n    \tconcatIfAny(translateExtAttrs(node, ' '), literal(' ')),\r\n        literal(node.variadic ? '...' : ''),\r\n        literal(node.name),\r\n        literal(node.optional ? '? ' : ''),\r\n        literal(': '),\r\n        translateType(node.idlType)\r\n    );\r\n}"]}