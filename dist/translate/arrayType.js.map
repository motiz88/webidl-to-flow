{"version":3,"sources":["src/translate/arrayType.js"],"names":[],"mappings":";;;;;;;;;;;;qBAaS,kBAAkB;;kBAXZ,IAAI;;;;sBACA,QAAQ;;;;oBACD,QAAQ;;;;;;AASlC,SAAS,kBAAkB,CAAC,IAAa,EAAiB;AACtD,6BAAO,IAAI,CAAC,KAAK,EAAE,mBAAmB,CAAC,CAAC;AACxC,6BAAO,IAAI,CAAC,aAAa,EAAE,kDAAkD,CAAC,CAAC;AAC/E,wBAAO,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,0CAA0C,CAAC,CAAC;AACtG,WAAO,gBAAG,UAAU,CACf,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CACxB,GAAG,CACA,UAAA,UAAU;eAAI,UAAU,GAAG,SAAS,GAAG,QAAQ;KAAA,CAClD,CACA,MAAM,CAAC,uBAAc,IAAI,CAAC,OAAO,CAAC,CAAC,CACnC,MAAM,CAAC,gBAAG,UAAU,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;CACtD","file":"src/translate/arrayType.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\nimport assert from 'assert';\r\nimport translateType from './type';\r\n\r\n// var literal = Rx.Observable.of;\r\n\r\nexport\r\ndefault\r\n\r\nfunction translateArrayType(node: IdlType): Rx.Observable {\r\n    assert(node.array, \"Expected an array\");\r\n    assert(node.nullableArray, \"An array node should have node.nullableArray too\");\r\n    assert.strictEqual(node.array, node.nullableArray.length, \"node.nullableArray.length !== node.array\");\r\n    return Rx.Observable\r\n        .from(node.nullableArray)\r\n        .map(\r\n            isNullable => isNullable ? 'Array<?' : 'Array<'\r\n        )\r\n        .concat(translateType(node.idlType))\r\n        .concat(Rx.Observable.repeat('>', node.array));\r\n}"]}