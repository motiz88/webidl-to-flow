{"version":3,"sources":["src/preprocessAst/flattenCallbackInterfaces.js"],"names":[],"mappings":";;;;;;;;;;qBAaS,yBAAyB;;kBAbnB,IAAI;;;;;;;0BAGI,cAAc;;;;;;;;AAUrC,SAAS,yBAAyB,CAAC,QAAuB,EAAiB;;AAEvE,WAAO,QAAQ,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,UAAA,KAAK,EAAI;AACzC,YAAI,GAAG,GAAG,6BAAW,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;mBAAI,IAAI,CAAC,IAAI,KAAK,oBAAoB;SAAA,CAAC,EACzE,MAAM,EAAE,aAAa,EAAE,8BAA8B,CAAC,CAAC;;AAE3D,YAAI,QAAQ,GAAG,SAAX,QAAQ,CAAI,EAAE,EAAK;AACnB,gBAAI,EAAE,IAAI,GAAG,CAAC,KAAK,EACf,OAAO,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAErB,MAAM,IAAI,KAAK,CAAC,wDAAwD,GAAG,EAAE,CAAC,CAAC;SACtF,CAAC;;AAEF,WAAG,CAAC,KAAK,CAAC,OAAO,CAAC,UAAA,EAAE,EAAI;AACpB,eAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,aAAa,EAAI;AACnC,wBAAQ,CAAC,EAAE,CAAC,CAAC,OAAO,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;aACvF,CAAC,CAAC;AACH,oBAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC;SACnC,CAAC,CAAC;;AAGH,eAAO,gBAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpC,CAAC,CAAC;CACN","file":"src/preprocessAst/flattenCallbackInterfaces.js","sourcesContent":["import Rx from 'rx';\r\n// import clone from 'clone';\r\n// import depres from 'depres/dist/depres';\r\nimport extractDag from './extractDag';\r\n\r\n/// flattenCallbackInterfaces walks the inheritance graph of `callback interface`s\r\n/// and copies members from parent to child.\r\n/// The transformed IdlCallbackInterface nodes contain no inheritance information.\r\nexport\r\ndefault\r\n\r\nfunction flattenCallbackInterfaces(astRoots: Rx.Observable): Rx.Observable {\r\n\r\n    return astRoots.toArray().concatMap(roots => {\r\n        var dag = extractDag(roots.filter(node => node.type === 'callback interface'),\r\n            'name', 'inheritance', 'callback interface hierarchy');\r\n\r\n        var nodeById = (id) => {\r\n            if (id in dag.nodes)\r\n                return dag.nodes[id];\r\n            else\r\n                throw new Error('No definition seen for implemented callback interface ' + id);\r\n        };\r\n\r\n        dag.order.forEach(id => {\r\n            dag.edges[id].forEach(implementedId => {\r\n                nodeById(id).members = nodeById(id).members.concat(nodeById(implementedId).members);\r\n            });\r\n            nodeById(id).inheritance = null;\r\n        });\r\n\r\n\r\n        return Rx.Observable.from(roots);\r\n    });\r\n}"]}