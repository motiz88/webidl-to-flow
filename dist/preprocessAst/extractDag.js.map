{"version":3,"sources":["src/preprocessAst/extractDag.js"],"names":[],"mappings":";;;;;;;;;;qBASS,UAAU;;gCATA,oBAAoB;;;;AASvC,SAAS,UAAU,CAAC,YAA2B,EAAE,YAA4B,EAAE,aAA6B,EAAE,mBAA8B,EAAiB;AACzJ,QAAI,KAAK,GAAG,EAAE;QAAE,KAAK,GAAG,EAAE,CAAC;AAC3B,QAAI,UAAU,GAAG,SAAb,UAAU,CAAG,aAAa;eAAK,OAAO,aAAa,KAAK,UAAU,GAAG,aAAa,GAAI,UAAC,CAAC;mBAAK,CAAC,CAAC,aAAa,CAAC;SAAA,AAAC;KAAC,CAAC;AACpH,QAAI,UAAU,GAAG,UAAU,CAAC,YAAY,CAAC;QACrC,WAAW,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;AAC5C,gBAAY,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AACxB,YAAI,EAAE,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;AACzB,YAAI,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;;AAE3B,YAAI,EAAE,EAAE,IAAI,KAAK,CAAA,AAAC,EACd,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;AACnB,YAAI,EAAE,EAAE,IAAI,KAAK,CAAA,AAAC,EACd,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;AACpB,YAAI,GAAG,EAAE;AACL,gBAAI,EAAE,GAAG,IAAI,KAAK,CAAA,AAAC,EACf,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AACpB,iBAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACvB;KACJ,CAAC,CAAC;AACH,QAAI,SAAS,GAAG,8BAAO,UAAU,CAAC,KAAK,CAAC,CAAC;AACzC,QAAI,SAAS,CAAC,OAAO,EACjB,MAAM,IAAI,KAAK,CAAC,yBAAsB,mBAAmB,GAAI,MAAM,GAAG,mBAAmB,GAAI,EAAE,CAAA,0BAAuB,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;AAE3J,WAAO;AACH,aAAK,EAAL,KAAK;AACL,aAAK,EAAL,KAAK;AACL,aAAK,EAAE,SAAS,CAAC,QAAQ;KAC5B,CAAC;CACL","file":"src/preprocessAst/extractDag.js","sourcesContent":["import depres from 'depres/dist/depres';\r\n\r\ntype StringSelector = string | ((x: any) => string);\r\n\r\nexport\r\ndefault\r\n\r\nfunction extractDag(relationList: Array < any >, idOrSelector: StringSelector, depOrSelector: StringSelector, relationDescription ? : string): Rx.Observable {\r\n    var edges = {}, nodes = {};\r\n    var selectorOf = keyOrSelector => (typeof keyOrSelector === 'function' ? keyOrSelector : ((x) => x[keyOrSelector]));\r\n    var idSelector = selectorOf(idOrSelector),\r\n        depSelector = selectorOf(depOrSelector);\r\n    relationList.forEach(rel => {\r\n        var id = idSelector(rel);\r\n        var dep = depSelector(rel);\r\n\r\n        if (!(id in edges))\r\n            edges[id] = [];\r\n        if (!(id in nodes))\r\n            nodes[id] = rel;\r\n        if (dep) {\r\n            if (!(dep in edges))\r\n                edges[dep] = [];\r\n            edges[id].push(dep);\r\n        }\r\n    });\r\n    var depResult = depres.resolveMap(edges);\r\n    if (depResult.aborted)\r\n        throw new Error(`Circular dependency${relationDescription ? (' in ' + relationDescription) : ''}; Did not resolve ` + depResult.unresolved.join(', '));\r\n\r\n    return {\r\n        edges,\r\n        nodes,\r\n        order: depResult.resolved\r\n    };\r\n}"]}