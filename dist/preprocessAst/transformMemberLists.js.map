{"version":3,"sources":["src/preprocessAst/transformMemberLists.js"],"names":[],"mappings":"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","file":"src/preprocessAst/transformMemberLists.js","sourcesContent":["//import Rx from 'rx';\r\nimport clone from 'clone';\r\nimport unique from 'array-unique';\r\nimport util from 'util';\r\nimport _ from 'lodash';\r\n\r\nfunction uniqueTypes(idlType)\r\n{\r\n    return _.uniq(idlType, false, JSON.stringify);\r\n}\r\n\r\n/// transformMemberLists creates distinct entries for unnamed and named special operations,\r\n/// and then merges the signatures of unnamed indexers.\r\nexport\r\ndefault\r\n\r\nfunction transformMemberLists(astRoots: Rx.Observable): Rx.Observable {\r\n    return astRoots.map(root => {\r\n        if (root.type === 'interface') {\r\n            var members = [];\r\n            root.members.forEach(member => {\r\n                if (member.getter || member.setter || member.creator || member.deleter || member.legacycaller ||\r\n                    member.stringifier) {\r\n                    if (member.name) {\r\n                        members.push(Object.assign({}, member, {\r\n                            name: null\r\n                        }));\r\n                        if (member.stringifier && member.name === 'toString')\r\n                            return; // continue forEach\r\n                    }\r\n                }\r\n                members.push(member);                \r\n            });\r\n\r\n            var isUnnamedIndexer = member => member.getter && !member.name && member.arguments && member.arguments.length === 1;\r\n            // now unify unnamed indexers\r\n            var indexers = members.filter(isUnnamedIndexer);\r\n            if (indexers.length > 1) {\r\n                members = members.filter(member => !isUnnamedIndexer(member));\r\n                var returnType = {\r\n                    union: true,\r\n                    idlType: uniqueTypes(indexers.map(node => node.idlType)),\r\n                    extAttrs: [],\r\n                };\r\n\r\n                var argumentExtAttrs = indexers.map(node => node.arguments[0].extAttrs);\r\n\r\n                var argument = {\r\n                    name: unique(indexers.map(node => node.arguments[0].name)).join('_or_'),\r\n                    idlType: {\r\n                        union: true,\r\n                        idlType: uniqueTypes(indexers.map(node => node.arguments[0].idlType)),\r\n                        extAttrs: [],\r\n                    },\r\n                    extAttrs: [].concat(...argumentExtAttrs),\r\n                };\r\n\r\n                var allExtAttrs = indexers.map(node => node.extAttrs);\r\n                members.push({\r\n                    name: null,\r\n                    type: 'operation',\r\n                    idlType: returnType,\r\n                    getter: true,\r\n                    arguments: [argument],\r\n                    extAttrs: [].concat(...allExtAttrs),\r\n                });\r\n            }\r\n            root.members = members;\r\n        }\r\n        return root;\r\n    });\r\n}"]}