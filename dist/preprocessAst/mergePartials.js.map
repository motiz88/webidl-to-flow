{"version":3,"sources":["src/preprocessAst/mergePartials.js"],"names":[],"mappings":";;;;;;;;;;qBAWS,aAAa;;kBAXP,IAAI;;;;2BACA,cAAc;;;;sBACd,QAAQ;;;;;;;AAS3B,SAAS,aAAa,CAAC,QAAuB,EAAiB;AAC3D,WAAO,QAAQ,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,UAAA,KAAK,EAAI;AACzC,YAAI,KAAK,GAAG,8BAAO,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;mBAAI,IAAI,CAAC,OAAO;SAAA,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI;mBAAI,IAAI,CAAC,IAAI;SAAA,CAAC,CAAC,CAAC;AAC9E,aAAK,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AAClB,gBAAI,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;uBAAI,IAAI,CAAC,IAAI,KAAK,IAAI;aAAA,CAAC,CAAC;AAC/D,gBAAI,KAAK,GAAG,8BAAO,eAAe,CAAC,GAAG,CAAC,UAAA,CAAC;uBAAI,CAAC,CAAC,IAAI;aAAA,CAAC,CAAC,CAAC;AACrD,qCAAO,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC;AAC3C,qCAAO,KAAK,CAAC,MAAM,GAAG,CAAC,OAAK,IAAI,+CAA0C,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAG,CAAC;AAC9F,gBAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACpB,gBAAI,cAAc,GAAG,eAAe,CAAC,MAAM,CAAC,UAAA,IAAI;uBAAI,CAAC,IAAI,CAAC,OAAO;aAAA,CAAC,CAAC;;AAEnE,qCAAO,cAAc,CAAC,MAAM,GAAG,CAAC,6BAA2B,IAAI,gCAA2B,IAAI,CAAG,CAAC;AAClG,gBAAI,YAAY,GAAG,eAAe,CAAC,MAAM,CAAC,UAAA,IAAI;uBAAI,IAAI,CAAC,OAAO;aAAA,CAAC,CAAC;AAChE,qCAAO,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC;AAClD,wBAAY,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AACzB,yCAAO,CAAC,IAAI,CAAC,WAAW,eAAa,IAAI,SAAI,IAAI,6BAAwB,IAAI,CAAC,WAAW,CAAG,CAAC;aAChG,CAAC,CAAC;AACH,gBAAI,QAAQ,GAAG,cAAc,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;AACpD,wBAAY,GAAG,YAAY,CAAC,MAAM,CAAC,UAAA,IAAI;uBAAI,IAAI,KAAK,QAAQ;aAAA,CAAC,CAAC;;AAE9D,wBAAY,CAAC,OAAO,CAAC,UAAA,WAAW,EAAI;AAChC,wBAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AAChE,2BAAW,CAAC,OAAO,GAAG,EAAE,CAAC;AACzB,wBAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AACnE,2BAAW,CAAC,QAAQ,GAAG,EAAE,CAAC;aAC7B,CAAC,CAAC;;AAEH,iBAAK,GAAG,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI;uBAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAA,WAAW;2BAAI,WAAW,KAAK,IAAI;iBAAA,CAAC;aAAA,CAAC,CAAC;AACtF,oBAAQ,CAAC,OAAO,GAAG,KAAK,CAAC;SAC5B,CAAC,CAAC;;AAEH,eAAO,gBAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACpC,CAAC,CAAC;CACN","file":"src/preprocessAst/mergePartials.js","sourcesContent":["import Rx from 'rx';\r\nimport unique from 'array-unique';\r\nimport assert from 'assert';\r\n\r\n/// mergePartials merges all `partial` declarations.\r\n/// The resulting sequence contains no nodes marked `partial`.\r\nexport\r\ndefault\r\n\r\nfunction mergePartials(astRoots: Rx.Observable): Rx.Observable {\r\n    return astRoots.toArray().concatMap(roots => {\r\n        var names = unique(roots.filter(node => node.partial).map(node => node.name));\r\n        names.forEach(name => {\r\n            var mergeCandidates = roots.filter(node => node.name === name);\r\n            var types = unique(mergeCandidates.map(c => c.type));\r\n            assert(types.length > 0, 'Internal error');\r\n            assert(types.length < 2, `${name} represents incompatible declarations: ${types.join(', ')}`);\r\n            var type = types[0];\r\n            var mainCandidates = mergeCandidates.filter(node => !node.partial);\r\n            // assert(mainCandidates.length > 0, `No non-partial ${type} declaration found for ${name}`);\r\n            assert(mainCandidates.length < 2, `Ambiguous non-partial ${type} declarations found for ${name}`);\r\n            var partialNodes = mergeCandidates.filter(node => node.partial);\r\n            assert(partialNodes.length > 0, 'Internal error');\r\n            partialNodes.forEach(node => {\r\n                assert(!node.inheritance, `Partial ${type} ${name} cannot inherit from ${node.inheritance}`);\r\n            });\r\n            var mainNode = mainCandidates[0] || partialNodes[0];\r\n            partialNodes = partialNodes.filter(node => node !== mainNode);\r\n\r\n            partialNodes.forEach(partialNode => {\r\n                mainNode.members = mainNode.members.concat(partialNode.members);\r\n                partialNode.members = [];\r\n                mainNode.extAttrs = mainNode.extAttrs.concat(partialNode.extAttrs);\r\n                partialNode.extAttrs = [];\r\n            });\r\n\r\n            roots = roots.filter(node => !partialNodes.some(partialNode => partialNode === node));\r\n            mainNode.partial = false;\r\n        });\r\n\r\n        return Rx.Observable.from(roots);\r\n    });\r\n}"]}