{"version":3,"sources":["src/preprocessAst/concretizeNamedConstructors.js"],"names":[],"mappings":";;;;;;;;;;;;qBAUS,2BAA2B;;kBAVrB,IAAI;;;;qBACD,OAAO;;;;;;;AASzB,SAAS,2BAA2B,CAAC,QAAuB,EAAiB;AACzE,WAAO,QAAQ,CAAC,SAAS,CAAC,UAAA,IAAI,EAAI;AAC9B,YAAI,QAAQ,GAAG,KAAK,CAAC;;AAErB,iBAAS,SAAS,GAAG;AACjB,gBAAI,CAAC,QAAQ,EAAE;AACX,oBAAI,GAAG,wBAAM,IAAI,CAAC,CAAC;AACnB,wBAAQ,GAAG,IAAI,CAAC;aACnB;SACJ;AACD,YAAI,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,KAAK,YAAY,EAAE;AACzD,gBAAI,cAAc,GAAG,IAAI,CAAC,QAAQ,CAC7B,MAAM,CAAC,UAAA,IAAI;uBAAI,IAAI,CAAC,IAAI,KAAK,kBAAkB;aAAA,CAAC,CAAC;AACtD,gBAAI,cAAc,CAAC,MAAM,EAAE;AACvB,yBAAS,EAAE,CAAC;AACZ,oBAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAA,IAAI;2BAAI,IAAI,CAAC,IAAI,KAAK,kBAAkB;iBAAA,CAAC,CAAC;AAC/E,uBAAO,gBAAG,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,gBAAG,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAA,IAAI;2BAAI,eAAc;AAC7F,4BAAI,EAAE,mBAAmB;AACzB,+BAAO,EAAE,IAAI,CAAC,IAAI,EACrB,EAAE,IAAI,EAAE;AACL,4BAAI,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK;AACpB,iCAAS,EAAE,IAAI,CAAC,SAAS,IAAI,EAAE;AAC/B,2BAAG,EAAE,SAAS,EACjB,CAAC;iBAAA,CAAC,CAAC,CAAC,CAAC;aACT;SACJ;AACD,eAAO,gBAAG,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;KACjC,CAAC,CAAC;CACN","file":"src/preprocessAst/concretizeNamedConstructors.js","sourcesContent":["import Rx from 'rx';\r\nimport clone from 'clone';\r\n\r\n/// concretizeNamedConstructors collects [NamedConstructor] attributes from interfaces and dictionaries\r\n/// and inserts equivalent {type: 'named constructor'} nodes into the AST stream.\r\nexport\r\ndefault\r\n\r\nfunction concretizeNamedConstructors(astRoots: Rx.Observable): Rx.Observable {\r\n    return astRoots.concatMap(root => {\r\n        var isCloned = false;\r\n\r\n        function cloneOnce() {\r\n            if (!isCloned) {\r\n                root = clone(root);\r\n                isCloned = true;\r\n            }\r\n        }\r\n        if (root.type === 'interface' || root.type === 'dictionary') {\r\n            var namedCtorAttrs = root.extAttrs\r\n                .filter(attr => attr.name === 'NamedConstructor');\r\n            if (namedCtorAttrs.length) {\r\n                cloneOnce();\r\n                root.extAttrs = root.extAttrs.filter(attr => attr.name !== 'NamedConstructor');\r\n                return Rx.Observable.of(root).concat(Rx.Observable.from(namedCtorAttrs.map(attr => Object.assign({\r\n                    type: 'named constructor',\r\n                    idlType: root.name,\r\n                }, attr, {\r\n                    name: attr.rhs.value,\r\n                    arguments: attr.arguments || [],\r\n                    rhs: undefined,\r\n                }))));\r\n            }\r\n        }\r\n        return Rx.Observable.of(root);\r\n    });\r\n}"]}