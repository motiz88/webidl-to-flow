{"version":3,"sources":["src/postprocessTokens/index.js"],"names":[],"mappings":";;;;;;;;;;qBAUS,iBAAiB;;+BAVZ,oBAAoB;;;;oBACjB,MAAM;;;;sBACJ,QAAQ;;;;kBACZ,IAAI;;;;AAOnB,SAAS,iBAAiB,CAAC,MAAqB,EAAiB;AAC7D,WAAO,gBAAG,UAAU,CAAC,MAAM,CAAC,UAAA,QAAQ,EAAI;;AAEpC,YAAI,KAAK,GAAG,CAAC,CAAC;AACd,YAAI,aAAa,GAAG,MAAM,CAAC;AAC3B,YAAI,aAAa,GAAG,IAAI,CAAC;;AAEzB,YAAI,eAAe,GAAG,SAAlB,eAAe,GAAS;AACxB,gBAAI,aAAa,EAAE;AACf,qBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,EAAE,CAAC,EAC1B,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AACnC,6BAAa,GAAG,KAAK,CAAC;aACzB;SACJ,CAAC;AACF,eAAO,MAAM,CACR,SAAS,CAAC,UAAA,KAAK,EAAI;AAChB,oBAAQ,KAAK;AACT,qBAAK,6BAAE,SAAS;AACZ,2BAAO,gBAAG,UAAU,CAAC,EAAE,CAAC,GAAG,EAAE,6BAAE,UAAU,CAAC,CAAC;AAAA,AAC/C,qBAAK,6BAAE,UAAU;AACb,2BAAO,gBAAG,UAAU,CAAC,EAAE,CAAC,6BAAE,UAAU,EAAE,GAAG,CAAC,CAAC;AAAA,AAC/C;AACI,2BAAO,gBAAG,UAAU,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;;AAAA,aAEtC;SACJ,CAAC,CACD,OAAO,CAAC,UAAA,KAAK,EAAI;AACV,gBAAI,KAAK,KAAK,6BAAE,aAAa,EAAE;AAC3B,oBAAI,CAAC,aAAa,EACd,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC1B,6BAAa,GAAG,IAAI,CAAC;aACxB,MAAM,IAAI,KAAK,KAAK,6BAAE,UAAU,EAAE;AAC/B,oBAAI,CAAC,aAAa,EACd,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC1B,6BAAa,GAAG,IAAI,CAAC;AACrB,kBAAE,KAAK,CAAC;aACX,MAAM,IAAI,KAAK,KAAK,6BAAE,UAAU,EAAE;AAC/B,oBAAI,CAAC,aAAa,EACd,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC1B,6BAAa,GAAG,IAAI,CAAC;AACrB,kBAAE,KAAK,CAAC;aACX,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AAClC,oBAAI,KAAK,CAAC,MAAM,EACZ,eAAe,EAAE,CAAC;AACtB,wBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC1B,MACG,yBAAO,KAAK,EAAE,iBAAiB,GAAG,kBAAK,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;SAC9D,EACD,UAAA,GAAG;mBAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC;SAAA,EAC5B;mBAAM,QAAQ,CAAC,WAAW,EAAE;SAAA,CAC/B,CAAC;KACT,CAAC,CAAC;CACN","file":"src/postprocessTokens/index.js","sourcesContent":["import t from '../FormattingToken';\r\nimport util from 'util';\r\nimport assert from 'assert';\r\nimport Rx from 'rx';\r\n\r\nexport\r\ndefault\r\n\r\nfunction postprocessTokens(tokens: Rx.Observable): Rx.Observable {\r\n    return Rx.Observable.create(observer => {\r\n\r\n        var depth = 0;\r\n        var indentElement = \"    \";\r\n        var lineStartFlag = true;\r\n\r\n        var handleLineStart = () => {\r\n            if (lineStartFlag) {\r\n                for (var i = 0; i < depth; ++i)\r\n                    observer.onNext(indentElement);\r\n                lineStartFlag = false;\r\n            }\r\n        };\r\n        return tokens\r\n            .concatMap(token => {\r\n                switch (token) {\r\n                    case t.openBrace:\r\n                        return Rx.Observable.of('{', t.indentMore);\r\n                    case t.closeBrace:\r\n                        return Rx.Observable.of(t.indentLess, '}');\r\n                    default:\r\n                        return Rx.Observable.of(token);\r\n                        // default: return `/**${token.code}**/`;\r\n                }\r\n            })\r\n            .forEach(token => {\r\n                    if (token === t.newlineIndent) {\r\n                        if (!lineStartFlag)\r\n                            observer.onNext('\\n');\r\n                        lineStartFlag = true;\r\n                    } else if (token === t.indentMore) {\r\n                        if (!lineStartFlag)\r\n                            observer.onNext('\\n');\r\n                        lineStartFlag = true;\r\n                        ++depth;\r\n                    } else if (token === t.indentLess) {\r\n                        if (!lineStartFlag)\r\n                            observer.onNext('\\n');\r\n                        lineStartFlag = true;\r\n                        --depth;\r\n                    } else if (typeof token === 'string') {\r\n                        if (token.length)\r\n                            handleLineStart();\r\n                        observer.onNext(token);\r\n                    } else\r\n                        assert(false, 'Invalid token: ' + util.inspect(token));\r\n                },\r\n                err => observer.onError(err),\r\n                () => observer.onCompleted()\r\n            );\r\n    });\r\n}"]}