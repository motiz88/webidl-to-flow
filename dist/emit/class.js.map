{"version":3,"sources":["src/emit/class.js"],"names":[],"mappings":";;;;;;;;;;;;qBAeS,SAAS;;kBAbH,IAAI;;;;sBACA,QAAQ;;;;uBACH,WAAW;;;;2BACP,eAAe;;;;2BACnB,gBAAgB;;;;+BAE1B,oBAAoB;;;;AADlC,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAQ/B,SAAS,SAAS,CAAC,IAOd,EACD,UAAwC,EAAiB;AACzD,QAAI,mBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,OAAO;eAAI,OAAO,CAAC,IAAI,KAAK,mBAAmB;KAAA,CAAC,CAAC;AAC9F,QAAI,mBAAmB,EAAE;AACrB,iCAAO,CAAC,IAAI,CAAC,WAAW,YAAU,IAAI,CAAC,IAAI,wGAAqG,CAAC;AACjJ,iCAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,OAAO;mBAAI,OAAO,CAAC,IAAI,KAAK,aAAa;SAAA,CAAC,YAAU,IAAI,CAAC,IAAI,qEAAkE,CAAC;AAC3J,iCAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,OAAO;mBAAI,OAAO,CAAC,IAAI,KAAK,aAAa;SAAA,CAAC,YAAU,IAAI,CAAC,IAAI,mEAAgE,CAAC;KAC3J;;AAED,WAAO,OAAO,kBAAe,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,EAAE,CAAA,QAAG,IAAI,CAAC,IAAI,SAAI,IAAI,CAAC,IAAI,SAAM,CACrF,MAAM,CAAC,OAAO,CAAC,6BAAE,aAAa,CAAC,CAAC,CAChC,MAAM,CAAC,OAAO,CAAC,mBAAmB,aAAW,IAAI,CAAC,IAAI,8BAAyB,IAAI,CAAC,IAAI,MAAG,CAAC,CAAC,CAC7F,MAAM,CAAC,8BAAY,8BAAgB,IAAI,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CACxD,MAAM,CAAC,OAAO,CAAC,6BAAE,SAAS,CAAC,CAAC,CAC5B,MAAM,CAAC,0BACJ,gBAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAChC,UAAU,CACb,CAAC,CACD,MAAM,CAAC,OAAO,CAAC,6BAAE,UAAU,CAAC,EAAE,OAAO,CAAC,mBAAmB,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;CAC/E","file":"src/emit/class.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\nimport assert from 'assert';\r\nimport emitMembers from './members';\r\nimport emitInheritance from './inheritance';\r\nimport concatIfAny from '../concatIfAny';\r\nvar literal = Rx.Observable.of;\r\nimport t from '../FormattingToken';\r\n\r\nexport\r\ndefault\r\n\r\nfunction emitClass(node: {\r\n        type: string,\r\n        name: string,\r\n        inheritance: ? (string | IdlType),\r\n        members : Array < any >,\r\n        partial ? : boolean,\r\n        extAttrs ? : Array < IdlExtAttr >,\r\n    },\r\n    nodeMapper: (node: any) => Rx.Observable): Rx.Observable {\r\n    var isNoInterfaceObject = node.extAttrs.some(subnode => subnode.name === 'NoInterfaceObject');\r\n    if (isNoInterfaceObject) {\r\n        assert(!node.inheritance, `Type ${node.name} [NoInterfaceObject] cannot have inheritance information; Should have been purged in preprocessAst`);\r\n        assert(!node.extAttrs.some(subnode => subnode.name === 'Constructor'), `Type ${node.name} has illegal combination: [NoInterfaceObject] and [Constructor]`);\r\n        assert(!node.members.some(subnode => subnode.name === 'constructor'), `Type ${node.name} has illegal combination: [NoInterfaceObject] and constructor`);\r\n    }\r\n\r\n    return literal(`/* WebIDL: ${node.partial ? 'partial ' : ''}${node.type} ${node.name} */`)\r\n        .concat(literal(t.newlineIndent))\r\n        .concat(literal(isNoInterfaceObject ? `type ${node.name} = ` : `declare class ${node.name} `))\r\n        .concat(concatIfAny(emitInheritance(node), literal(' ')))\r\n        .concat(literal(t.openBrace))\r\n        .concat(emitMembers(\r\n            Rx.Observable.from(node.members),\r\n            nodeMapper\r\n        ))\r\n        .concat(literal(t.closeBrace), literal(isNoInterfaceObject ? ';' : ''));\r\n}"]}