{"version":3,"sources":["src/emit/typeAlias.js"],"names":[],"mappings":";;;;;;;;;;;;qBAcS,aAAa;;kBAZP,IAAI;;;;2CAKqB,iCAAiC;;;;;;AAFzE,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAS/B,SAAS,aAAa,CAAC,IAItB,EAAiB;AACd,WAAO,gBAAG,UAAU,CAAC,MAAM,CACvB,OAAO,WAAS,IAAI,CAAC,IAAI,SAAM,EAC/B,8CAA4B,IAAI,CAAC,EACjC,OAAO,CAAC,GAAG,CAAC,CACf,CAAC;CACL","file":"src/emit/typeAlias.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\n// import notImplemented from './notImplemented';\r\n\r\nvar literal = Rx.Observable.of;\r\n\r\nimport translateTypeOrFunctionType from '../translate/typeOrFunctionType';\r\n\r\nexport\r\ndefault\r\n\r\nfunction emitTypeAlias(node: {\r\n    name: string,\r\n    idlType: IdlType | string,\r\n    arguments ? : Array < IdlArgument >\r\n}): Rx.Observable {\r\n    return Rx.Observable.concat(\r\n        literal(`type ${node.name} = `),\r\n        translateTypeOrFunctionType(node),\r\n        literal(';')\r\n    );\r\n}"]}