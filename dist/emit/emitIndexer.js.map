{"version":3,"sources":["src/emit/emitIndexer.js"],"names":[],"mappings":";;;;;;;;;;;;qBAeS,WAAW;;kBAbL,IAAI;;;;oBAKO,QAAQ;;;;yBACH,aAAa;;;;;;AAH5C,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAU/B,SAAS,WAAW,CAAC,IAGpB,EAAiB;AACd,WAAO,4BAAmB,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,uBAAc,IAAI,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;CACpH","file":"src/emit/emitIndexer.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\n// import assert from 'assert';\r\n\r\nvar literal = Rx.Observable.of;\r\n\r\nimport translateType from './type';\r\nimport translateArguments from './arguments';\r\n\r\nexport\r\ndefault\r\n\r\nfunction emitIndexer(node: {\r\n    arguments: ? array <IdlArgument>,\r\n    idlType ? : IdlType\r\n}): Rx.Observable {\r\n    return translateArguments(node.arguments, '[]').concat(literal(': '), translateType(node.idlType), literal(';'));\r\n}"]}