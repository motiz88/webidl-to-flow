{"version":3,"sources":["src/emit/extAttrComment.js"],"names":[],"mappings":";;;;;;;;;;;;qBAcS,kBAAkB;;kBAZZ,IAAI;;;;;;kCAEY,wBAAwB;;;;oBACtC,MAAM;;;;AAEvB,IAAI,OAAO,GAAG,gBAAG,UAAU,CAAC,EAAE,CAAC;;AAO/B,SAAS,kBAAkB,CAAC,IAAgB,EAAiB;AACzD,QAAI,IAAI,GAAG,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACtC,QAAI,IAAI,CAAC,SAAS,EACd,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAC3B,qCAAmB,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC,EACxC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;;AAEtB,QAAI,IAAI,CAAC,GAAG,EAAE;AACV,YAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;AACjC,gBAAQ,IAAI,CAAC,GAAG,CAAC,IAAI;AACjB,iBAAK,YAAY;AACb,oBAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AAC5C,sBAAM;AAAA,AACV,iBAAK,iBAAiB;AAClB,oBAAI,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AACvD,sBAAM;AAAA,AACV;AACI,oBAAI,GAAG,IAAI,CAAC,MAAM,CAAC,kBAAK,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1D,sBAAM;AAAA,SACb;KACJ;AACD,QAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;AACpC,WAAO,IAAI,CAAC;CACf","file":"src/emit/extAttrComment.js","sourcesContent":["/* @flow */\r\n\r\nimport Rx from 'rx';\r\n// import notImplemented from './notImplemented';\r\nimport translateArguments from '../translate/arguments';\r\nimport util from 'util';\r\n\r\nvar literal = Rx.Observable.of;\r\n\r\nexport\r\ndefault\r\n\r\nfunction emitExtAttrComment(node: IdlExtAttr): Rx.Observable {\r\n    var decl = literal('/* [', node.name);\r\n    if (node.arguments)\r\n        decl = decl.concat(literal('('),\r\n            translateArguments(node.arguments || []),\r\n            literal(')'));\r\n\r\n    if (node.rhs) {\r\n        decl = decl.concat(literal('='));\r\n        switch (node.rhs.type) {\r\n            case 'identifier':\r\n                decl = decl.concat(literal(node.rhs.value));\r\n                break;\r\n            case 'identifier-list':\r\n                decl = decl.concat(Rx.Observable.from(node.rhs.value));\r\n                break;\r\n            default:\r\n                decl = decl.concat(util.inspect(literal(node.rhs.value)));\r\n                break;\r\n        }\r\n    }\r\n    decl = decl.concat(literal('] */'));\r\n    return decl;\r\n}"]}